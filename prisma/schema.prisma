// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String?
  accounts      Account[]
  snippets      Snippet[] // Added relation to snippets
  comments      Comment[] // Added relation to comments
  snippetLikes  Like[]    // Added relation to likes
  bookmarks     Bookmark[] // Added relation to bookmarks
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

// New Snippet model
model Snippet {
  id          String   @id @default(cuid())
  title       String
  description String
  code        String   @db.Text
  language    String
  framework   String?
  category    String
  tags        String[]
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  views       Int      @default(0)

  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
}

// New Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  snippetId String
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
}

// New Like model
model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippetId String
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([userId, snippetId])
}

// New Bookmark model
model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippetId String
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([userId, snippetId])
}